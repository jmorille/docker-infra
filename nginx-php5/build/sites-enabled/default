# env APP_ES_1_PORT_9200_TCP_ADDR
# env APP_ES_1_PORT_9200_TCP_PORT


#upstream lb-ttserver {
#   ip_hash;
#   server es:9200 weight=10 max_fails=3 fail_timeout=30s; # Reverse proxy to machine-1
   #   server ttserver:8000 weight=10 max_fails=3 fail_timeout=30s; # Reverse proxy to machine-1
   #   server 192.168.1.101:9200 weight=10 max_fails=3 fail_timeout=30s; # Reverse proxy to machine-2
   # server $ENV{"TTSERVER_1_PORT_8000_TCP_ADDR"}:$ENV{"TTSERVER_1_PORT_8000_TCP_PORT"} weight=10 max_fails=3 fail_timeout=30s; # Reverse proxy to machine-2
   # server $ENV{"TTSERVER_2_PORT_8000_TCP_ADDR"}:$ENV{"TTSERVER_2_PORT_8000_TCP_PORT"} weight=10 max_fails=3 fail_timeout=30s; # Reverse proxy to machine-2
#}


#server {
#    listen 80;
#    server_name .forgott.com;
#    return 301 https://$host$request_uri;
#}


server {
    listen 80;
    listen 443 default_server ssl http2;
    # server_name .forgott.com;

    #ssl on;
    #ssl_certificate /data/cert/server.crt;
    #ssl_certificate_key /data/cert/server-nopasswd.key;

    # http://www.bsdnow.tv/tutorials/nginx
    # https://mozilla.github.io/server-side-tls/ssl-config-generator/
    # Intermediate cypersuite :https://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28default.29
    ## TODO Test Session https://www.ssllabs.com/ssltest/index.html
    # ###############################################################
    ssl_session_timeout 10m;
    ssl_session_cache shared:SSL:50m;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    # cd /etc/ssl/certs && openssl dhparam -out dhparam.pem 2048
   # ssl_dhparam  /data/cert/dhparam.pem;


    # enables server-side protection from BEAST attacks
    # http://blog.ivanristic.com/2013/09/is-beast-still-a-threat.html
    ssl_prefer_server_ciphers on;

    # modern configuration. tweak to your needs.
    # disable SSLv3(enabled by default since nginx 0.8.19) since it's less secure then TLS http://en.wikipedia.org/wiki/Secure_Sockets_Layer#SSL_3.0
    # ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_protocols TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';

     # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
     add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";

    # OCSP Stapling ---
    # fetch OCSP records from URL in ssl_certificate and cache them
    # ssl_stapling on;
    # ssl_stapling_verify on;

    location / {
     # gzip_static on;
     #  gunzip on;
     #  root /usr/local/nginx/html;
       root /data/html;
       index index.html index.html;
       expires 0;
       etag on;
       add_header Cache-Control "private";
   }

   # pass the PHP scripts to FastCGI server listening on /var/run/php5-fpm.sock
   location ~ \.php$ {
                try_files $uri =404;
                fastcgi_pass unix:/var/run/php5-fpm.sock;
                fastcgi_index index.php;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                include fastcgi_params;
    }


     location /status {
         stub_status;
     }


}
